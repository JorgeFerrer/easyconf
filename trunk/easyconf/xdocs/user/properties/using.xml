<document>
   <properties>
      <title>Reading properties</title>
      <author >Jorge Ferrer</author>
   </properties>
   <body>
      <section name="Reading properties">
         <p>
            In this section it is assumed that you know how to get the properties
            of a component. Otherwise, please read the
             <a href="/user/introduction.html">Introduction</a>.
         </p>
         <p>
            The properties are hold in a class called <tt>ComponentProperties</tt>
            which has one method for each supported property type. For example
            to get a property called <tt>skin</tt> which is a string of
            characters you can use:
         </p>
         <source>
             String skin = getProperties().getString("skin");
         </source>
         <p>
             Note: In all the examples it will be assumed that there
             is a method called <tt>getProperties()</tt> which obtains the
             properties of a configuration component. A possible implementation
             of this method would be:
         </p>
         <source>
            private ComponentProperties getProperties() {
               return ConfReader.getComponent("my-component").getProperties();
            }
         </source>
      </section>
      <section name="Using default values">
          <p>
              All methods to get the value of a property have an optional parameter
              to specify a default value. Using this parameter the previous
              example would be written as:
          </p>
          <source>
              String skin = getProperties().getString("skin", "blue");
          </source>
          <p>
              If the property <tt>skin</tt> is not found in any of the property
              files associated with the component, <i>blue</i> will be returned.
          </p>
          <p>
              When no default value is specified EasyConf considers
              the property mandatory and if it is not found a
              <tt>NoSuchElementException</tt> is thrown.
          </p>
      </section>
      <section name="Numeric property types">
         <p>
            Besides the usual <tt>String</tt> type, EasyConf has included support
            for automatic conversion to all of Java's numeric types. Native
            numeric types are supported both in the native and in the class
            format whenever possible. Here is a complete list of the supported
            numeric types:
         </p>
          <ul>
            <li>BigDecimal</li>
            <li>BigInteger</li>
            <li>Boolean</li>
            <li>Byte</li>
            <li>Double</li>
            <li>Float</li>
            <li>Integer</li>
            <li>Long</li>
            <li>Short</li>
          </ul>
         <p>
             To use the automatic conversion you must know in advance which
             is the numeric type of the property and use the appropriate <i>getter</i> 
             method of <tt>ComponentProperties</tt>. For example to read a
             <tt>Short</tt> value the <tt>getShort(...)</tt> method should be
             used, for a <tt>BigInteger</tt>, use <tt>getBigInteger(...)</tt>,
             etc. Here is an example which shows the usage of methods for all
             of the supported numeric types:
         </p>
         <source>
             value = getProperties().getBigDecimal("big-decimal");
             value = getProperties().getBigInteger("big-integer");
             value = getProperties().getBoolean("boolean");
             value = getProperties().getByte("byte");
             value = getProperties().getDouble("double");
             value = getProperties().getFloat("float");
             value = getProperties().getInteger("integer");
             value = getProperties().getLong("long");
             value = getProperties().getShort("short");
         </source>
         <p>
             If the conversion fails, a runtime <tt>ConversionException</tt> will
             be thrown.
         </p>
      </section>
      <section name="Multivaluated properties">
         <p>
            Multivaluated properties are those that may have more than one value. EasyConf
            supports automatic conversion of multivaluated properties to:
         </p>   
         <ul>
            <li><tt>java.util.List</tt></li>
            <li><tt>java.lang.String[]</tt></li>
         </ul>
         <p>
            The conversion is performed by separating the property value interpreting
            the comma character as a separator. Here is an example:
         </p>
         <source>
            multivaluated=one,two,three
         </source>
         <p>
            Note that the character next to the comma is not ignored even if it is an space 
            so do not leave spaces between elements (unless that's really what you want).
            This property can be read with both the <tt>getList()</tt> and the 
            <tt>getStringArray()</tt> methods:
         </p>
         <source>
         	List values = getProperties().getList("multivaluated");
            String[] array = getProperties().getStringArray("multivaluated");
         </source>
         <p>
            Both methods are pretty similar. The most important property is explained in the
            support for variables. This is explained in the next section.
         </p>
         <p>
            <b>Important note</b>: as a result of this automatic conversion if the value
            of a single valued property contains commas they must be scaped with a double slash. 
            Example:
         </p>
         <source>
            single-valued=one\\,two\\,three
         </source>   
      </section>
      <section name="Using variables">
         <p>
            EasyConf supports using variables in the value of a property to
            refer to the value of another property. This functionality is not available for 
            all property types, only for the following:
         </p>
         <ul>
            <li>String</li>
            <li>StringArray</li>
         </ul>
         <p>
            Note: support for variables is provided by one of the underlying libraries,
            Jakata Commons configuration, which is the one that has this limitation. I hope that the support
            for variables will be extended to all property types in future versions.
         </p>
         <p>Lets see some examples:</p>
	      <source>
      	  supported-currencies=${trusted-currencies},pound
      	  trusted-currencies=dollar,euro
           european-currency=euro
           default-currency=${european-currency}
         </source>        

      </section>
      <section name="Properties with class names">
         <p>=== CONTINUE HERE ===</p>
      </section>
      <section name="Including other files">
         <p>Use the <tt>include-and-override</tt> special property. Every properties file can
            include as many files as wanted. Inclusion is recursive so that included files
            can include further files.</p>
         <p>Each time a file is included it will override the properties of the 
            files including them</p>
         <p>If an included file is not found it is silently ignored. ...</p>
      </section>
      
   </body>
</document>