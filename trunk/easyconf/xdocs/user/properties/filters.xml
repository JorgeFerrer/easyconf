<document>
   <properties>
      <title>Property filters</title>
      <author >Jorge Ferrer</author>
   </properties>
   <body>
      <section name="What are property filters?">
         <p>
            Filters are a method to give several values to a property and choose one of 
            them based on the value of one or more selectors. They have been found particularly
            useful in environments which have heavy personalization requirements, although
            thay can be very handy in a lot of other situations
         </p>
         <p>
				As an example will take a property called <tt>skin</tt> which defines the default
            skin of a user in an educative portal. The users are categorized in types
            differentiating teachers from students from others. The students are further 
            subdivided depending on their grade level (primary, secondary, etc). We 
            want to let the person
            configuring the portal set a different default skin depending on the type of 
            user. To do this we retrieve the property value using the user type and
            subtype as selectors:
			</p>
         <source>
getProperties().getString("skin", Filter.by(userType, userSubtype));
         </source>
         <p>
            In the properties file the skin property may be given different values
            depending of the values of the user type and subtype. For example:
         </p>
         <source>
skin[teacher]=blue
skin[student][secundary]=green
skin[student]=yellow
skin=grey
			</source>
         <p>
            With this configuration the default skin is <i>grey</i> and it will 
            be applied to users which
            are not teachers neither students. For students the default skin is
            <i>yellow</i> unless it is of subtype secundary in which case the
            default skin will be <i>green</i>. It is important to know that it
            is optional and up to the person writting the configuration to use
            selector values or not. He/she can just give a simple value to the
            property. Using filters from code when retrieving the property value
            just offers the possibility to the configurator.
         </p>
         <p>
            EasyConf supports an unlimited number of selectors. They can be optionally 
            used in any of the supported property types with or without a defautl value.
            Check the <a href="/apidocs/com/germinus/easyconf/Filter.html">Javadoc of 
               the Filter class</a> for more information
         </p>
      </section>
      <section name="Variable based filters">
         <p>
            <b>New on version 0.9</b>
         </p>
         <p>
            While the above functionality is enough for most cases, sometimes it is desired
            to have value of the property which depends on a value only known by the running
            application. For example a servlet may wish to configure a URL but make it dependent
            on the current host name and port. EasyConf supports this functionality though a
            special type of filter. To implement the previous example the properties file should
            have:
            <source>
external-app.url=http://${host}:${port}/external-app
				</source>
             When this property is read the application can provide the values of the <tt>host</tt>
             and <tt>port</tt> variables:
             <source>
Map hostAndPort = new HashMap();
hostAndPort.put("host", host);
hostAndPort.put("port", port);
getProperties().getString("external-app.url", Filter.usingVariables(hostAndPort));
             </source>
             The variable values can be provided in any bean that implements the 
             <tt>java.util.Map</tt> interface. Besides there are conveniency methods
             for cases with three or less variables. Using them the previous example
             could be rewriten as:
             <source>
getProperties().getString("external-app.url", 
								  Filter.usingVariables("host", host, "port", port));
             </source>
             If a property's value has a variable and its value is not provided. The variable
             string (<tt>${variableName}</tt>) will be returned instead. On the other hand,
             the name of a variable can be the same as the key of another property. In that case
             the value of the property will be used if the variable is not given a value 
             programatically using variable based filters
			</p>            
         <p>
            Filters based on selectors and filters based on variables can be combined. An example would be:
            <source>
getProperties().getString("external-app.url", 
								  Filter.by(appName).setVariables("host", host, "port", port));
               
            </source>
            Check the Javadocs for more information.
         </p>
      </section>
   </body>
</document>