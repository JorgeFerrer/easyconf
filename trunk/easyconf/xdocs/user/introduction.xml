<document>
   <properties>
      <title>User Guide</title>
      <author >Jorge Ferrer</author>
   </properties>
   <body>
      <section name="Introduction to the User Guide">
         <p> EasyConf aims to be as easy to use as possible. If all you want is 
            to make configurable a constant or a set of constants a single line 
            of code for each is needed. But it is not much harder when your 
            necessities grow and you want to use complex XML configuration. </p>
         <p> This guide provides full documentation of all of EasyConf's 
            features and points to documentation of the libraries it depends 
            for further information. </p>
      </section>
      <section name="Vision">
         <p> EasyConf was born from necessity because none of the existing 
            libraries had all the needed functionality. But it is not our 
            intent to reimplement what does exist so whenever possible we'll 
            base its functionality in existing free software libraries. </p>
      </section>
      <section name="Configuration concepts">
         <p> EasyConf organizes the configuration it reads in components. Each 
            component has its own name and is composed of two parts: </p>
         <ul>
            <li>Properties: obtained from property files</li>
            <li>Configuration object: filled from XML files</li>
         </ul>
         <p> A component can have only properties, only a configuration object 
            or have both. </p>
         <p> Let's start with the examples. To obtain the configuration of an 
             application named <i>my-app</i> you have to write the 
            following code:</p>
         <source> 
            ComponentConfiguration conf = EasyConf.getConfiguration("my-app");
         </source>
         <p>
            <a href="../../apidocs/com/germinus/easyconf/ComponentConfiguration.html">ComponentConfiguration</a> 
            is the class which holds the configuration of <i>my-app</i>. To retrieve the
         	properties all you have to do is:
         </p>
         <source> 
            ComponentProperties props = conf.getProperties();
         </source>
         <p>
            <a href="../../apidocs/com/germinus/easyconf/ComponentProperties.html">ComponentProperties</a> 
            contains methods to retrieve properties of any of the 
            <a href="../reference/property-types.html">supported types</a>. The properties of the 
            example component will be read from a file called 
            <tt>my-app.properties</tt>. Later will see that properties can also be read from
            other complementary sources. 
         </p>
         <p>
            The configuration object can be read using another method of the <tt>conf</tt>
            object:
         </p>
         <source>
            Object confObj = conf.getConfigurationObject();
         </source>
         <p>
            The configuration object contains a representation of an XML file. The XML file can have
            any user defined vocabulary, but it must be given the name of the component with
            <tt>xml</tt> as the extension. In our example it
            must be called <tt>my-app.xml</tt>. This file will be read and converted to user 
            defined classes. The conversion is configured in a mapping file which must have 
            <tt>digesterRules.xml</tt> as its extensions. In our example it should be called 
            <tt>my-app.digesterRules.xml</tt>
         </p>
         <p>
            Now you that you have the big picture, the next sections will give more details
            and examples of the features of EasyConf
         </p>
      </section>
      <section name="Work in progress">
         <p> This manual is a work in progress. Here is the expected table of 
            contents: </p>
         <ul>
            <li><a href="introduction.html">Introduction</a></li>
            <li>
               <p>Properties</p>
               <ul>
                  <li><a href="properties/using.html">Using</a></li>
						<li><a href="properties/sysproperties.html">System properties</a></li>
						<li><a href="properties/filters.html">Filters</a></li>
						<li><a href="properties/multicomponents.html">Multiple components</a></li>
						<li><a href="properties/multienvironments.html">Multiple environments</a></li>
						<li>DB persistance</li>
                  <!-- db + LDAP + JNDI, pairs, beans -->
               </ul>
            </li>
            <li>
               <p>XML Files</p>
               <ul>
						<li><a href="xml/using.html">Using</a></li>
						<li><a href="xml/variables.html">Variables</a></li>
						<li>Complex mappings</li>
						<li>DB persistance</li>
                  <!-- multi component, multi environment, simplification -->
               </ul>
            </li>
            <li><p>Advanced features</p>
               <ul>
						<li><a href="asp-model.html">ASP model</a></li>
						<li><a href="reloading.html">Automatic reloading</a></li>
						<li>J2EE:
							<ul>
								<li><a href="J2EE/taglibs.html">Taglibs</a></li>
								<li><a href="J2EE/services.html">Services</a></li>
							</ul>
						</li>
                  <li><a href="jmx/introduction.html">JMX</a></li>
               </ul>
            </li>
            <li><p>Specific use cases (TBD)</p>
               <ul>
                  <li>Portlets</li>
                  <li>Hibernate</li>
               </ul>
            </li>
         </ul>
         <p> The progress of this manual can be followed either looking at the left menu or if you can't wait by viewing the latest 
				<a 																										 href="http://cvs.sourceforge.net/viewcvs.py/easyconf/easyconf/xdocs/">CVS files</a> </p>
      </section>
   </body>
</document>