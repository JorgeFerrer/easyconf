<document>
   <properties>
      <title>Multiple components support</title>
      <author >Jorge Ferrer</author>
   </properties>
   <body>
      <section name="Configuring aggregated components">
         <p>In some environments you don't have complete control of how
            the configuration will be changed. This is particularly true
            in component based environments. This situations can be views
            from two different poins of view</p>
         <ul>
            <li><i>Component developer</i>: has to give a default configuration but he
               also wants to provide some method to override that configuration.</li>
            <li><i>Component aggregator</i>: wants to adapt the configuration of the
               components to his specific needs by changing the default 
               configuration.</li>
         </ul>
         <p>
            EasyConf has specific functionality to support these necessities in a very
            simple way. If you are the developer of a component, you can distribute it
            with a base configuration file (for example <tt>my-component.properties</tt>).
            It is recommended that you place it so that it will be included in the
            application classpath. If you distribute the application as a JAR file, just
            put it in the root of the JAR. If you distribute it as a WAR file, place
            it in the <tt>WEB-INF/classes</tt> subdirectory. For other kinds of distribution
            files refer to its documentation to find a place that will be included in
            the classpath when the component is deployed.
         </p>
         <p>
            On the other side, if you need to aggregate several components <i>which
            have been configured using EasyConf</i> you can override the the properties
            of any of them in <i>one single file</i>: <b>global-configuration.properties</b>.
         </p>    
         <p>
            The name of this file is fixed by EasyConf (it is one of its 
            <a href="/reference/conventions.html">conventions</a>), but you can 
            include other files using the <tt>include-and-override</tt> special property. This
            allows you to effectively change its name: just include the file with your desired
            name and do not set any property in the <tt>global-configuration.properties</tt>.
         </p>
         <p>
            The properties are specified in the <tt>global-configuration.properties</tt> (or any
            of its included files) in the same way as they are in the base configuration file.
            But it is possible to prefix the property names with the name of the component
            to prevent collision of names among different components. The component name is
            separated from the property name by the <tt>:</tt> character. 
          </p>
          <p>
            For example to override the default value of the property <tt>skin</tt> of the
            component <i>my-component</i> you should add the following line:
         </p>
         <source>
my-component:skin=purple
         </source>
         <p>
             The following image shows how this process works in a diagram:
         </p>
         <img src="../../resources/multi-component.gif"/>
         <p>
             In blue, a client application asks for the configuration of component 
             <i>moduleABC</i>. When it asks for a specific property (hidden in 
             the diagram for simplicity) EasyConf checks if
             the property is present in <tt>global-configuration.properties</tt> (or any of
             its included files, of course). If not it will read the values in 
             <tt>moduleABC.properties</tt>. In red, a different client asks for the 
             configuration of a different component, <i>moduleXYZ</i>. But once again
             EasyConf checks first the <i>global-configuration.properties</i> file and
             only if a property is not found it looks for it in 
             <tt>moduleXYZ.properties</tt>            
         </p>
      </section>
      <section name="A complete example">   
         <p>
            You have a portlet named <i>reports</i> which shows data present in a 
            database table. You use the portlet name as the configuration component name,
            so you can configure it with the property file named <tt>reports.properties</tt>.
            It may have the following contents:            
         </p>
         <source>
database.url=jdbc:mysql://localhost/database
table=reports
primary-key=reportid
         </source>   
         <p>
            Then you have a second portlet named <i>banner</i> which shows a configured banner,
            the image can be shown inside a table or by itself. Following the same convention
            of the previous portlet the configuration is specified in the file
            <tt>banner.properties</tt>.
         </p>
         <source>
img=image.jpg
url=http://easyconf.sourceforge.net
table=false
         </source>
         <p>
            Both portlets are released and someone chooses to deploy them in her
            portal, but the default configuration doesn't fit her needs. Because
            the portlets have been configured using EasyConf he can just override
            the specific properties needed in a single file: 
            <tt>global-configuration.properties</tt>. In this case the aggregator
            wants to set a different <tt>database.url</tt> for the <i>reports</i>
            portlet and a different <tt>url</tt> for the <i>banner</i> portlet,
            so he sets the desired properties in the <tt>global-configuration.properties</tt>
            file as follows:
         </p>
         <source>
reports:database.url=jdbc:mysql://my-db-server/my-database
banner:url=http://maven.apache.org            
         </source>
         <p>
            It's that simple. The original portlet distribution has not been modified and
            updates to new releases will cost nothing (unless the property names have changed).
            Note that prefixing the the property with the component name (reports or banner in
            this example) is optional, but is highly recommended to avoid name collision.
         </p>
      </section>
      <section name="Use cases">   
         <p>
            All component based environments will find this functionality useful. There
            are other strategies to achieve this behaviour such as providing a method
            to configure the component passing a <tt>Properties</tt> or a custom made
            object. EasyConf also allows implementing component configuration this way,
            but the file based approach is offered for those cases where it is considered
            more appropriate. Situations in which you may opt to use this approach are:
         </p>
         <ul>
            <li>Portals which aggregate portlets</li>
            <li>Every application agregates libraries</li>
            <li>Complex J2EE applications aggregate EJB libraries</li>
            <li>Custom made frameworks aggregate their own components</li>
         </ul>
      </section>
   </body>
</document>