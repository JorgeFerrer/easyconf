<document>

  <properties>
    <title>Conventions used by EasyConf</title>
    <author >Jorge Ferrer</author>
  </properties>

  <body>
    <section name="Conventions used by EasyConf">
      <p>
        EasyConf follows a set of conventions to make it easier to use. Here is 
        a list or the conventions currently in use:
      </p>
      <ul>
        <li>Given a component named <i>my-component</i> its base configuration properties
            will be obtained from a file named <tt>my-component.properties</tt>.</li>
        <li>Given a component named <i>my-component</i> its XML
            file will be obtained from a file named <tt>my-component.xml</tt> and the
            file which defines the mapping from XML to POJOs is obtained from a file
            named <tt>my-component.digesterRules.xml</tt>.</li>
        <li>A file named <tt>global-configuration.properties</tt> will be
            read for every component to find overridden property values. </li>
        <li>The property names of the <tt>global-configuration.properties</tt> file may be 
         prefixed with the name of the component followed by a colon character. For example:
            <source>
              my-component:property-name=property-value
            </source>
        </li>
        <li>A special property named <tt>include-and-override</tt> can be used to include files. In case 
            of collision of property names the included ones will override the values given in the
            file which contains the inclusion instruction. If several <tt>include-and-override</tt> 
            files are used, the last ones will override any previous property values</li>
        <li>When using filters, property selectors are appended to the property names inside 
            brackets. Example:
            <source>
              property-name[selector1][selector2]=property-value
            </source>
        </li>
      </ul>
      <p>
      Other significant strategies of EasyConf are:
      </p>
      <ul>
        <li>Any file looked for that doesn't exist will be silently ignored. An exception is
            if the properties of a component is explicitly requested and there is no properties
            file or the object configuration is explicitly requested and there is no XML file</li>
       </ul>
      </section>
    </body>
  </document>